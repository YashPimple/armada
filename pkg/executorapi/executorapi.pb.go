// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/executorapi/executorapi.proto

package executorapi

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	resource "k8s.io/apimachinery/pkg/api/resource"

	api "github.com/armadaproject/armada/pkg/api"
	armadaevents "github.com/armadaproject/armada/pkg/armadaevents"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventList struct {
	Events []*armadaevents.EventSequence `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *EventList) Reset()      { *m = EventList{} }
func (*EventList) ProtoMessage() {}
func (*EventList) Descriptor() ([]byte, []int) {
	return fileDescriptor_57e0d9d0e484e459, []int{0}
}
func (m *EventList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventList.Merge(m, src)
}
func (m *EventList) XXX_Size() int {
	return m.Size()
}
func (m *EventList) XXX_DiscardUnknown() {
	xxx_messageInfo_EventList.DiscardUnknown(m)
}

var xxx_messageInfo_EventList proto.InternalMessageInfo

func (m *EventList) GetEvents() []*armadaevents.EventSequence {
	if m != nil {
		return m.Events
	}
	return nil
}

type LeaseRequest struct {
	// Each executor has a unique name associated with it.
	ExecutorId string `protobuf:"bytes,1,opt,name=executor_id,json=executorId,proto3" json:"executorId,omitempty"`
	// Nodes are split into pools. This field indicates for which pool jobs are leased.
	Pool string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	// Total resources available for scheduling across all nodes.
	Resources map[string]resource.Quantity `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Jobs submitted to this executor must require at least this amount of resources.
	MinimumJobSize map[string]resource.Quantity `protobuf:"bytes,4,rep,name=minimum_job_size,json=minimumJobSize,proto3" json:"minimumJobSize" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// For each node in the cluster:
	// - the total allocatable resources on that node,
	// - the job runs running on those nodes
	// - any taints and labels on the node.
	Nodes []api.NodeInfo `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes"`
	// Run Ids of jobs owned by the executor but not currently assigned to a node
	UnassignedJobRunIds []armadaevents.Uuid `protobuf:"bytes,6,rep,name=unassigned_job_run_ids,json=unassignedJobRunIds,proto3" json:"unassignedJobRunIds"`
}

func (m *LeaseRequest) Reset()      { *m = LeaseRequest{} }
func (*LeaseRequest) ProtoMessage() {}
func (*LeaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57e0d9d0e484e459, []int{1}
}
func (m *LeaseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseRequest.Merge(m, src)
}
func (m *LeaseRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseRequest proto.InternalMessageInfo

func (m *LeaseRequest) GetExecutorId() string {
	if m != nil {
		return m.ExecutorId
	}
	return ""
}

func (m *LeaseRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *LeaseRequest) GetResources() map[string]resource.Quantity {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *LeaseRequest) GetMinimumJobSize() map[string]resource.Quantity {
	if m != nil {
		return m.MinimumJobSize
	}
	return nil
}

func (m *LeaseRequest) GetNodes() []api.NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *LeaseRequest) GetUnassignedJobRunIds() []armadaevents.Uuid {
	if m != nil {
		return m.UnassignedJobRunIds
	}
	return nil
}

type JobRunLease struct {
	JobId    *armadaevents.Uuid `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"jobId,omitempty"`
	JobRunId *armadaevents.Uuid `protobuf:"bytes,2,opt,name=job_run_id,json=jobRunId,proto3" json:"jobRunId,omitempty"`
	// Shared ObjectMeta for all Kubernetes objects in this job.
	// If provided, the namespace therein is used for all objects that do not explicitly specify another.
	// And the labels and annotations therein are applied to all objects part of the job.
	ObjectMeta *armadaevents.ObjectMeta `protobuf:"bytes,3,opt,name=object_meta,json=objectMeta,proto3" json:"objectMeta,omitempty"`
	// Main object that determines when an application has finished.
	MainObject *armadaevents.KubernetesMainObject `protobuf:"bytes,4,opt,name=main_object,json=mainObject,proto3" json:"mainObject,omitempty"`
	// Set of additional Kubernetes objects to create as part of the job.
	Objects []*armadaevents.KubernetesObject `protobuf:"bytes,5,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *JobRunLease) Reset()      { *m = JobRunLease{} }
func (*JobRunLease) ProtoMessage() {}
func (*JobRunLease) Descriptor() ([]byte, []int) {
	return fileDescriptor_57e0d9d0e484e459, []int{2}
}
func (m *JobRunLease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRunLease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRunLease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRunLease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRunLease.Merge(m, src)
}
func (m *JobRunLease) XXX_Size() int {
	return m.Size()
}
func (m *JobRunLease) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRunLease.DiscardUnknown(m)
}

var xxx_messageInfo_JobRunLease proto.InternalMessageInfo

func (m *JobRunLease) GetJobId() *armadaevents.Uuid {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *JobRunLease) GetJobRunId() *armadaevents.Uuid {
	if m != nil {
		return m.JobRunId
	}
	return nil
}

func (m *JobRunLease) GetObjectMeta() *armadaevents.ObjectMeta {
	if m != nil {
		return m.ObjectMeta
	}
	return nil
}

func (m *JobRunLease) GetMainObject() *armadaevents.KubernetesMainObject {
	if m != nil {
		return m.MainObject
	}
	return nil
}

func (m *JobRunLease) GetObjects() []*armadaevents.KubernetesObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

type LeaseResponse struct {
	JobRunIdsToCancel []*armadaevents.Uuid `protobuf:"bytes,1,rep,name=job_run_ids_to_cancel,json=jobRunIdsToCancel,proto3" json:"jobRunIdsToCancel,omitempty"`
	Leases            []*JobRunLease       `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
	Final             bool                 `protobuf:"varint,3,opt,name=final,proto3" json:"final,omitempty"`
}

func (m *LeaseResponse) Reset()      { *m = LeaseResponse{} }
func (*LeaseResponse) ProtoMessage() {}
func (*LeaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57e0d9d0e484e459, []int{3}
}
func (m *LeaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseResponse.Merge(m, src)
}
func (m *LeaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseResponse proto.InternalMessageInfo

func (m *LeaseResponse) GetJobRunIdsToCancel() []*armadaevents.Uuid {
	if m != nil {
		return m.JobRunIdsToCancel
	}
	return nil
}

func (m *LeaseResponse) GetLeases() []*JobRunLease {
	if m != nil {
		return m.Leases
	}
	return nil
}

func (m *LeaseResponse) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func init() {
	proto.RegisterType((*EventList)(nil), "executorapi.EventList")
	proto.RegisterType((*LeaseRequest)(nil), "executorapi.LeaseRequest")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "executorapi.LeaseRequest.MinimumJobSizeEntry")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "executorapi.LeaseRequest.ResourcesEntry")
	proto.RegisterType((*JobRunLease)(nil), "executorapi.JobRunLease")
	proto.RegisterType((*LeaseResponse)(nil), "executorapi.LeaseResponse")
}

func init() { proto.RegisterFile("pkg/executorapi/executorapi.proto", fileDescriptor_57e0d9d0e484e459) }

var fileDescriptor_57e0d9d0e484e459 = []byte{
	// 888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0x5e, 0x67, 0xb3, 0x4b, 0x33, 0xdb, 0x84, 0x66, 0xd2, 0xae, 0xcc, 0x46, 0xd8, 0x65, 0x91,
	0x50, 0x90, 0xa8, 0x8d, 0x02, 0x87, 0xc2, 0xa1, 0x12, 0x8b, 0x82, 0xd8, 0xd2, 0x50, 0xd5, 0x01,
	0xa4, 0x22, 0xa1, 0x95, 0xbd, 0x7e, 0x71, 0x27, 0xbb, 0x9e, 0x71, 0x3d, 0xe3, 0x8a, 0xed, 0x89,
	0x33, 0x27, 0x0e, 0x1c, 0x40, 0xe2, 0x07, 0xf5, 0xd8, 0x63, 0x4f, 0x16, 0x24, 0x27, 0xfc, 0x2b,
	0x90, 0x67, 0xc6, 0xd9, 0xd9, 0xb2, 0xb9, 0xf7, 0x64, 0xbf, 0xef, 0xbd, 0xf9, 0xbe, 0x37, 0xef,
	0xcd, 0x9b, 0x41, 0xef, 0x65, 0xb3, 0xc4, 0x87, 0x9f, 0x61, 0x5a, 0x08, 0x96, 0x87, 0x19, 0x31,
	0xff, 0xbd, 0x2c, 0x67, 0x82, 0xe1, 0x9e, 0x01, 0x0d, 0xde, 0xad, 0xe3, 0xc3, 0x3c, 0x0d, 0xe3,
	0x10, 0x9e, 0x01, 0x15, 0xdc, 0x57, 0x1f, 0x15, 0x3b, 0xd8, 0x93, 0xee, 0x8c, 0xf8, 0x4f, 0x0b,
	0x28, 0x40, 0x83, 0xfb, 0x09, 0x63, 0xc9, 0x1c, 0x7c, 0x69, 0x45, 0xc5, 0xa9, 0x0f, 0x69, 0x26,
	0x16, 0xda, 0x79, 0x27, 0x21, 0xe2, 0x49, 0x11, 0x79, 0x53, 0x96, 0xfa, 0x09, 0x4b, 0xd8, 0x32,
	0xaa, 0xb6, 0xa4, 0x21, 0xff, 0x74, 0xf8, 0xa7, 0xb3, 0xbb, 0xdc, 0x23, 0xac, 0xd6, 0x48, 0xc3,
	0xe9, 0x13, 0x42, 0x21, 0x5f, 0xf8, 0x8d, 0x68, 0x0e, 0x9c, 0x15, 0xf9, 0x14, 0xfc, 0x04, 0x28,
	0xe4, 0xa1, 0x80, 0x58, 0xad, 0x1a, 0xfe, 0x80, 0xb6, 0x8e, 0xea, 0x34, 0x1f, 0x10, 0x2e, 0xf0,
	0x18, 0x75, 0x55, 0xce, 0xb6, 0x75, 0xbb, 0x7d, 0xd0, 0x3b, 0xdc, 0xf7, 0xcc, 0xfd, 0x78, 0x32,
	0xf0, 0x04, 0x9e, 0x16, 0x40, 0xa7, 0x30, 0xba, 0x59, 0x95, 0xee, 0x0d, 0xe5, 0xf9, 0x88, 0xa5,
	0x44, 0xc8, 0xd4, 0x03, 0x4d, 0x30, 0xfc, 0xb5, 0x8b, 0xae, 0x3f, 0x80, 0x90, 0x43, 0x50, 0xc7,
	0x73, 0x81, 0x3f, 0x43, 0x97, 0xd5, 0x9a, 0x90, 0xd8, 0xb6, 0x6e, 0x5b, 0x07, 0x5b, 0x23, 0xbb,
	0x2a, 0xdd, 0x9b, 0x0d, 0x3c, 0x8e, 0x0d, 0x1e, 0xb4, 0x44, 0xf1, 0x07, 0x68, 0x33, 0x63, 0x6c,
	0x6e, 0x6f, 0xc8, 0x35, 0xb8, 0x2a, 0xdd, 0x9d, 0xda, 0x36, 0xa2, 0xa5, 0x1f, 0x3f, 0x46, 0x5b,
	0xcd, 0x3e, 0xb9, 0xdd, 0x96, 0x3b, 0x38, 0xf0, 0xcc, 0xae, 0x99, 0x09, 0x79, 0x41, 0x13, 0x7a,
	0x44, 0x45, 0xbe, 0x18, 0xed, 0xbe, 0x28, 0xdd, 0x56, 0x55, 0xba, 0x4b, 0x8a, 0x60, 0xf9, 0x8b,
	0x19, 0xba, 0x91, 0x12, 0x4a, 0xd2, 0x22, 0x9d, 0x9c, 0xb1, 0x68, 0xc2, 0xc9, 0x73, 0xb0, 0x37,
	0xa5, 0xc2, 0x9d, 0xab, 0x15, 0x8e, 0xd5, 0x8a, 0xfb, 0x2c, 0x3a, 0x21, 0xcf, 0x41, 0xc9, 0xf4,
	0xb5, 0xcc, 0x4e, 0xba, 0xe2, 0x0c, 0x5e, 0xb3, 0xf1, 0x21, 0xea, 0x50, 0x16, 0x03, 0xb7, 0x3b,
	0x52, 0x65, 0xdb, 0xab, 0xd9, 0xbf, 0x65, 0x31, 0x8c, 0xe9, 0x29, 0x1b, 0x6d, 0x6b, 0x16, 0x15,
	0x13, 0xa8, 0x0f, 0x8e, 0x51, 0xbf, 0xa0, 0x21, 0xe7, 0x24, 0xa1, 0x10, 0xcb, 0x3c, 0xf3, 0x82,
	0x4e, 0x48, 0xcc, 0xed, 0xae, 0x24, 0xc1, 0xab, 0xed, 0xfc, 0xbe, 0x20, 0xf1, 0x68, 0x5f, 0x33,
	0xed, 0x2d, 0x57, 0xde, 0x67, 0x51, 0x50, 0xd0, 0x71, 0xcc, 0x83, 0x75, 0xe0, 0xe0, 0x77, 0x0b,
	0xed, 0xac, 0xd6, 0x0e, 0xbf, 0x8f, 0xda, 0x33, 0x58, 0xe8, 0x9e, 0xee, 0x56, 0xa5, 0xbb, 0x3d,
	0x83, 0x85, 0xd1, 0x9e, 0xda, 0x8b, 0x1f, 0xa3, 0xce, 0xb3, 0x70, 0x5e, 0x80, 0x6c, 0x63, 0xef,
	0xd0, 0xf3, 0xd4, 0x79, 0xf5, 0xcc, 0xf3, 0xea, 0x65, 0xb3, 0x44, 0xee, 0xb4, 0xa9, 0xbc, 0xf7,
	0xa8, 0x08, 0xa9, 0x20, 0x62, 0x31, 0xda, 0xab, 0x4a, 0xf7, 0x6d, 0x49, 0x60, 0x10, 0x2b, 0xc6,
	0xcf, 0x37, 0xee, 0x5a, 0x83, 0x3f, 0x2d, 0xb4, 0xb7, 0xa6, 0xe0, 0x6f, 0x42, 0x6e, 0xc3, 0xbf,
	0xda, 0xa8, 0xa7, 0x0a, 0x28, 0xcf, 0x07, 0xbe, 0x87, 0xba, 0x75, 0x77, 0xf4, 0x18, 0xac, 0x6f,
	0x8c, 0xe4, 0x3c, 0x63, 0xd1, 0xca, 0x54, 0x74, 0x24, 0x80, 0xbf, 0x46, 0x68, 0xd9, 0x5d, 0x9d,
	0xf3, 0x3a, 0x8e, 0x7e, 0x55, 0xba, 0xf8, 0x4c, 0x77, 0xce, 0xa0, 0xb9, 0xd6, 0x60, 0xf8, 0x04,
	0xf5, 0x58, 0x74, 0x06, 0x53, 0x31, 0x49, 0x41, 0x84, 0x76, 0x5b, 0x52, 0xd9, 0xab, 0x54, 0x0f,
	0x65, 0xc0, 0x31, 0x88, 0x50, 0xcd, 0x2b, 0xbb, 0xb4, 0xcd, 0x79, 0x5d, 0xa2, 0xf8, 0x27, 0xd4,
	0x4b, 0x43, 0x42, 0x27, 0x0a, 0xb2, 0x37, 0x25, 0xe9, 0x70, 0x95, 0xf4, 0x9b, 0x22, 0x82, 0x9c,
	0x82, 0x00, 0x7e, 0x1c, 0x12, 0xaa, 0x24, 0x14, 0x7d, 0x7a, 0x69, 0x9b, 0xf4, 0x4b, 0x14, 0x3f,
	0x44, 0x6f, 0x29, 0xe6, 0x66, 0x38, 0x9c, 0xab, 0xa8, 0x35, 0xed, 0xad, 0xaa, 0x74, 0x77, 0xf5,
	0x12, 0x83, 0xb3, 0x61, 0x19, 0xfe, 0x6b, 0xa1, 0x6d, 0x3d, 0xb8, 0x3c, 0x63, 0x94, 0x03, 0x06,
	0x74, 0xcb, 0x18, 0x9f, 0x89, 0x60, 0x93, 0x69, 0x48, 0xa7, 0x30, 0xd7, 0xf7, 0xe2, 0xba, 0x5a,
	0xbb, 0x55, 0xe9, 0xee, 0x37, 0x75, 0xe5, 0xdf, 0xb1, 0x2f, 0xe5, 0x02, 0x43, 0x6e, 0xf7, 0x7f,
	0x4e, 0xfc, 0x15, 0xea, 0xce, 0x6b, 0x5d, 0x6e, 0x6f, 0x48, 0x5e, 0x7b, 0xe5, 0x2e, 0x31, 0x4e,
	0x8c, 0xba, 0x6c, 0x55, 0xac, 0x79, 0xd9, 0x2a, 0x04, 0x7f, 0x88, 0x3a, 0xa7, 0x84, 0x86, 0x73,
	0xd9, 0xbf, 0x6b, 0xea, 0xe8, 0x48, 0xc0, 0x3c, 0x3a, 0x12, 0x38, 0xfc, 0xc3, 0x42, 0xbd, 0x23,
	0x2d, 0xf2, 0x45, 0x46, 0xf0, 0x58, 0x5f, 0xd3, 0x4a, 0x8c, 0xe3, 0x77, 0xae, 0xbc, 0xce, 0x06,
	0x83, 0x75, 0x2e, 0x55, 0xb0, 0x03, 0xeb, 0x63, 0x0b, 0xdf, 0x43, 0xd7, 0x03, 0xc8, 0x58, 0x2e,
	0xe4, 0x3b, 0xc1, 0x71, 0x7f, 0x25, 0xfe, 0xf2, 0x95, 0x19, 0xf4, 0x3d, 0xf5, 0xea, 0x79, 0xcd,
	0x7b, 0xe6, 0x1d, 0xd5, 0x19, 0x8e, 0x1e, 0xbd, 0xfa, 0xc7, 0x69, 0xfd, 0x72, 0xee, 0x58, 0x2f,
	0xce, 0x1d, 0xeb, 0xe5, 0xb9, 0x63, 0xfd, 0x7d, 0xee, 0x58, 0xbf, 0x5d, 0x38, 0xad, 0x97, 0x17,
	0x4e, 0xeb, 0xd5, 0x85, 0xd3, 0xfa, 0xd1, 0x37, 0x5e, 0x44, 0xd5, 0x81, 0x2c, 0x67, 0x75, 0x0f,
	0xb5, 0xe5, 0xbf, 0xf6, 0x64, 0x47, 0x5d, 0x29, 0xf1, 0xc9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x2e, 0x7d, 0x2b, 0x7f, 0xcc, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecutorApiClient is the client API for ExecutorApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorApiClient interface {
	LeaseJobRuns(ctx context.Context, opts ...grpc.CallOption) (ExecutorApi_LeaseJobRunsClient, error)
	ReportEvents(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*types.Empty, error)
}

type executorApiClient struct {
	cc *grpc.ClientConn
}

func NewExecutorApiClient(cc *grpc.ClientConn) ExecutorApiClient {
	return &executorApiClient{cc}
}

func (c *executorApiClient) LeaseJobRuns(ctx context.Context, opts ...grpc.CallOption) (ExecutorApi_LeaseJobRunsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExecutorApi_serviceDesc.Streams[0], "/executorapi.ExecutorApi/LeaseJobRuns", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorApiLeaseJobRunsClient{stream}
	return x, nil
}

type ExecutorApi_LeaseJobRunsClient interface {
	Send(*LeaseRequest) error
	Recv() (*LeaseResponse, error)
	grpc.ClientStream
}

type executorApiLeaseJobRunsClient struct {
	grpc.ClientStream
}

func (x *executorApiLeaseJobRunsClient) Send(m *LeaseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorApiLeaseJobRunsClient) Recv() (*LeaseResponse, error) {
	m := new(LeaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorApiClient) ReportEvents(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/executorapi.ExecutorApi/ReportEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorApiServer is the server API for ExecutorApi service.
type ExecutorApiServer interface {
	LeaseJobRuns(ExecutorApi_LeaseJobRunsServer) error
	ReportEvents(context.Context, *EventList) (*types.Empty, error)
}

// UnimplementedExecutorApiServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorApiServer struct {
}

func (*UnimplementedExecutorApiServer) LeaseJobRuns(srv ExecutorApi_LeaseJobRunsServer) error {
	return status.Errorf(codes.Unimplemented, "method LeaseJobRuns not implemented")
}
func (*UnimplementedExecutorApiServer) ReportEvents(ctx context.Context, req *EventList) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEvents not implemented")
}

func RegisterExecutorApiServer(s *grpc.Server, srv ExecutorApiServer) {
	s.RegisterService(&_ExecutorApi_serviceDesc, srv)
}

func _ExecutorApi_LeaseJobRuns_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorApiServer).LeaseJobRuns(&executorApiLeaseJobRunsServer{stream})
}

type ExecutorApi_LeaseJobRunsServer interface {
	Send(*LeaseResponse) error
	Recv() (*LeaseRequest, error)
	grpc.ServerStream
}

type executorApiLeaseJobRunsServer struct {
	grpc.ServerStream
}

func (x *executorApiLeaseJobRunsServer) Send(m *LeaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorApiLeaseJobRunsServer) Recv() (*LeaseRequest, error) {
	m := new(LeaseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExecutorApi_ReportEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorApiServer).ReportEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/executorapi.ExecutorApi/ReportEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorApiServer).ReportEvents(ctx, req.(*EventList))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExecutorApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "executorapi.ExecutorApi",
	HandlerType: (*ExecutorApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportEvents",
			Handler:    _ExecutorApi_ReportEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LeaseJobRuns",
			Handler:       _ExecutorApi_LeaseJobRuns_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/executorapi/executorapi.proto",
}

func (m *EventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LeaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnassignedJobRunIds) > 0 {
		for iNdEx := len(m.UnassignedJobRunIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnassignedJobRunIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MinimumJobSize) > 0 {
		for k := range m.MinimumJobSize {
			v := m.MinimumJobSize[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintExecutorapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintExecutorapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Resources) > 0 {
		for k := range m.Resources {
			v := m.Resources[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintExecutorapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintExecutorapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintExecutorapi(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExecutorId) > 0 {
		i -= len(m.ExecutorId)
		copy(dAtA[i:], m.ExecutorId)
		i = encodeVarintExecutorapi(dAtA, i, uint64(len(m.ExecutorId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobRunLease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRunLease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobRunLease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MainObject != nil {
		{
			size, err := m.MainObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutorapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ObjectMeta != nil {
		{
			size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutorapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.JobRunId != nil {
		{
			size, err := m.JobRunId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutorapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.JobId != nil {
		{
			size, err := m.JobId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutorapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Final {
		i--
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Leases) > 0 {
		for iNdEx := len(m.Leases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Leases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.JobRunIdsToCancel) > 0 {
		for iNdEx := len(m.JobRunIdsToCancel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JobRunIdsToCancel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutorapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecutorapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutorapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovExecutorapi(uint64(l))
		}
	}
	return n
}

func (m *LeaseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExecutorId)
	if l > 0 {
		n += 1 + l + sovExecutorapi(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovExecutorapi(uint64(l))
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovExecutorapi(uint64(len(k))) + 1 + l + sovExecutorapi(uint64(l))
			n += mapEntrySize + 1 + sovExecutorapi(uint64(mapEntrySize))
		}
	}
	if len(m.MinimumJobSize) > 0 {
		for k, v := range m.MinimumJobSize {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovExecutorapi(uint64(len(k))) + 1 + l + sovExecutorapi(uint64(l))
			n += mapEntrySize + 1 + sovExecutorapi(uint64(mapEntrySize))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovExecutorapi(uint64(l))
		}
	}
	if len(m.UnassignedJobRunIds) > 0 {
		for _, e := range m.UnassignedJobRunIds {
			l = e.Size()
			n += 1 + l + sovExecutorapi(uint64(l))
		}
	}
	return n
}

func (m *JobRunLease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobId != nil {
		l = m.JobId.Size()
		n += 1 + l + sovExecutorapi(uint64(l))
	}
	if m.JobRunId != nil {
		l = m.JobRunId.Size()
		n += 1 + l + sovExecutorapi(uint64(l))
	}
	if m.ObjectMeta != nil {
		l = m.ObjectMeta.Size()
		n += 1 + l + sovExecutorapi(uint64(l))
	}
	if m.MainObject != nil {
		l = m.MainObject.Size()
		n += 1 + l + sovExecutorapi(uint64(l))
	}
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovExecutorapi(uint64(l))
		}
	}
	return n
}

func (m *LeaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobRunIdsToCancel) > 0 {
		for _, e := range m.JobRunIdsToCancel {
			l = e.Size()
			n += 1 + l + sovExecutorapi(uint64(l))
		}
	}
	if len(m.Leases) > 0 {
		for _, e := range m.Leases {
			l = e.Size()
			n += 1 + l + sovExecutorapi(uint64(l))
		}
	}
	if m.Final {
		n += 2
	}
	return n
}

func sovExecutorapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutorapi(x uint64) (n int) {
	return sovExecutorapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EventList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*EventSequence{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(fmt.Sprintf("%v", f), "EventSequence", "armadaevents.EventSequence", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&EventList{`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaseRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]NodeInfo{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForNodes += "}"
	repeatedStringForUnassignedJobRunIds := "[]Uuid{"
	for _, f := range this.UnassignedJobRunIds {
		repeatedStringForUnassignedJobRunIds += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForUnassignedJobRunIds += "}"
	keysForResources := make([]string, 0, len(this.Resources))
	for k, _ := range this.Resources {
		keysForResources = append(keysForResources, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResources)
	mapStringForResources := "map[string]resource.Quantity{"
	for _, k := range keysForResources {
		mapStringForResources += fmt.Sprintf("%v: %v,", k, this.Resources[k])
	}
	mapStringForResources += "}"
	keysForMinimumJobSize := make([]string, 0, len(this.MinimumJobSize))
	for k, _ := range this.MinimumJobSize {
		keysForMinimumJobSize = append(keysForMinimumJobSize, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMinimumJobSize)
	mapStringForMinimumJobSize := "map[string]resource.Quantity{"
	for _, k := range keysForMinimumJobSize {
		mapStringForMinimumJobSize += fmt.Sprintf("%v: %v,", k, this.MinimumJobSize[k])
	}
	mapStringForMinimumJobSize += "}"
	s := strings.Join([]string{`&LeaseRequest{`,
		`ExecutorId:` + fmt.Sprintf("%v", this.ExecutorId) + `,`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`Resources:` + mapStringForResources + `,`,
		`MinimumJobSize:` + mapStringForMinimumJobSize + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`UnassignedJobRunIds:` + repeatedStringForUnassignedJobRunIds + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobRunLease) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjects := "[]*KubernetesObject{"
	for _, f := range this.Objects {
		repeatedStringForObjects += strings.Replace(fmt.Sprintf("%v", f), "KubernetesObject", "armadaevents.KubernetesObject", 1) + ","
	}
	repeatedStringForObjects += "}"
	s := strings.Join([]string{`&JobRunLease{`,
		`JobId:` + strings.Replace(fmt.Sprintf("%v", this.JobId), "Uuid", "armadaevents.Uuid", 1) + `,`,
		`JobRunId:` + strings.Replace(fmt.Sprintf("%v", this.JobRunId), "Uuid", "armadaevents.Uuid", 1) + `,`,
		`ObjectMeta:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "armadaevents.ObjectMeta", 1) + `,`,
		`MainObject:` + strings.Replace(fmt.Sprintf("%v", this.MainObject), "KubernetesMainObject", "armadaevents.KubernetesMainObject", 1) + `,`,
		`Objects:` + repeatedStringForObjects + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaseResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJobRunIdsToCancel := "[]*Uuid{"
	for _, f := range this.JobRunIdsToCancel {
		repeatedStringForJobRunIdsToCancel += strings.Replace(fmt.Sprintf("%v", f), "Uuid", "armadaevents.Uuid", 1) + ","
	}
	repeatedStringForJobRunIdsToCancel += "}"
	repeatedStringForLeases := "[]*JobRunLease{"
	for _, f := range this.Leases {
		repeatedStringForLeases += strings.Replace(f.String(), "JobRunLease", "JobRunLease", 1) + ","
	}
	repeatedStringForLeases += "}"
	s := strings.Join([]string{`&LeaseResponse{`,
		`JobRunIdsToCancel:` + repeatedStringForJobRunIdsToCancel + `,`,
		`Leases:` + repeatedStringForLeases + `,`,
		`Final:` + fmt.Sprintf("%v", this.Final) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExecutorapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutorapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &armadaevents.EventSequence{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutorapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutorapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutorapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutorapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExecutorapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExecutorapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutorapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExecutorapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthExecutorapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExecutorapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExecutorapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumJobSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimumJobSize == nil {
				m.MinimumJobSize = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutorapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutorapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExecutorapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExecutorapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutorapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExecutorapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthExecutorapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExecutorapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExecutorapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MinimumJobSize[mapkey] = *mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, api.NodeInfo{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnassignedJobRunIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnassignedJobRunIds = append(m.UnassignedJobRunIds, armadaevents.Uuid{})
			if err := m.UnassignedJobRunIds[len(m.UnassignedJobRunIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutorapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobRunLease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutorapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRunLease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRunLease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobId == nil {
				m.JobId = &armadaevents.Uuid{}
			}
			if err := m.JobId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobRunId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobRunId == nil {
				m.JobRunId = &armadaevents.Uuid{}
			}
			if err := m.JobRunId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMeta == nil {
				m.ObjectMeta = &armadaevents.ObjectMeta{}
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MainObject == nil {
				m.MainObject = &armadaevents.KubernetesMainObject{}
			}
			if err := m.MainObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &armadaevents.KubernetesObject{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutorapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutorapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobRunIdsToCancel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobRunIdsToCancel = append(m.JobRunIdsToCancel, &armadaevents.Uuid{})
			if err := m.JobRunIdsToCancel[len(m.JobRunIdsToCancel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutorapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leases = append(m.Leases, &JobRunLease{})
			if err := m.Leases[len(m.Leases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExecutorapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutorapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutorapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutorapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutorapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutorapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutorapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutorapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutorapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutorapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutorapi = fmt.Errorf("proto: unexpected end of group")
)
